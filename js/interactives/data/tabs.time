&lt;!doctype html&gt;
&lt;html&gt;
@9,@&lt;head&gt;
@9,@    &lt;style&gt; /* YOUR STYLES HERE */ &lt;/style&gt;
@9,@&lt;/head&gt;
&lt;body&gt;

&lt;ul class="tabs"&gt;
    &lt;li&gt; &lt;a href="#one"&gt;One&lt;/a&gt;
    &lt;li&gt; &lt;a href="#two"&gt;Two&lt;/a&gt;
    &lt;li&gt; &lt;a href="#three"&gt;Three&lt;/a&gt;
&lt;/ul&gt;

&lt;div class="tab" id="one"&gt;First tab&lt;/div&gt;
&lt;div class="tab" id="two"&gt;Second tab&lt;/div&gt;
&lt;div class="tab" id="three"&gt;Third tab&lt;/div&gt;

&lt;script src="http://code.jquery.com/jquery-1.9.1.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
@1,@var clickedTab = function() {
@1,1@    
@2,@    var $this = $(this);
@8,@    $('ul.tabs .active').removeClass('active');
@8,@    $this.closest('li').addClass('active'); //highlight current item
@3,@    var href = $this.attr('href'); //get the href attribute
@4,@    var tab = $(href); //find the tab by ID
@5,@    $('.tab').hide();
@5,@    tab.show();
@1,@};

@6,6@$('.tab').not(':first').hide();
@7,@$('ul.tabs a').on('click', clickedTab);
@7,@$('ul.tabs a:first').trigger('click');
@6,@
@1,6@$('ul.tabs a').on('click', clickedTab);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
@@c:0;Since we're working with jQuery events, for this example we'll show the script in the context of the page. As you can see, we start out with the HTML5 doctype to trigger the newest JavaScript versions and HTML features, and we put the scripts at the bottom so that loading will be visually faster for our users.

In the middle, we have an unordered list to use as our tab set, followed by three &lt;div&gt; tags with matching IDs. In non-JavaScript browsers, this will still work via in-page links to those IDs.@@
@@c:1;First things first, let's stub out our click listener and attach it to the tabs. We're going to select the links inside the menu, instead of the list items, because we want to use their <var>href</var> attributes for selecting the correct tab.@@
@@c:2;Inside the listener, the element that was clicked will be assigned to <var>this</var> before our function is called. We'll make a jQuery version of it for easy manipulation.@@
@@c:3;The <var>href</var> attributes of each link are in-page links, but (in a rare example of good design in CSS) they are also valid ID selectors. We'll extract them from the clicked link by using jQuery's <var>attr()</var> function, which gets or sets an element's attributes.@@
@@c:4;Once we have that selector, we can use it to find the tab that we want to show.@@
@@c:5;Now we'll hide all the tabs (including the one we want) and show the selected tab. There's a little bit of waste here, but browsers are fast enough that hiding an element and then showing it on the next line will be imperceptible, and the code remains elegant.@@
@@c:6;There's only one problem remaining: the tabs work once you click on them, but when the page first loads, all the &lt;div&gt; tags are visible. We could hide all the tabs after the first one, like so...@@
@@c:7;But it's cleaner if we just trigger a click event on the first link and let the listener we just created do the work.@@
@@c:8;Triggering the click listener makes more sense if we put in some code to show which tab is currently selected, by adding an "active" class to the clicked link's parent &lt;li&gt;. Now, even though we didn't plan for that code from the start, the first item will get the correct class when the page loads, because it all goes through a single code path.@@
@@c:9;By styling this page in different ways, you can get different user experiences without changing the JavaScript at all. This code works for tabs, but it would also work for a thumbnail gallery, if the links contained images, or a slideshow, if they took the form of an outline. Could you improve on this code? What else could you make from this simple interaction with just a tweak or two?@@