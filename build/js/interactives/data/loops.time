var numbers = [1, 17, 23, 5, 68, 4, 3, 2, 100, 31];
@1,@
@2,@var sum = 0;
@2,@var highest = -Infinity;
@2,@var lowest = Infinity;
@2,@
@1,@for (var i = 0; i < numbers.length; i++) {
@1,2@    
@3,4@    sum = sum + numbers[i];
@5,@    var item = numbers[i];
@5,@    sum = sum + item;
@5,@    if (item > highest) {
@5,@        highest = item;
@5,@    }
@6,@    if (item < lowest) {
@6,@        lowest = item;
@6,@    }
@1,@}
@3,@
@4,4@for (var i = 0; i < highest.length; i++) {
@4,4@    var item = numbers[i];
@4,4@    if (item > highest) {
@4,4@        highest = item;
@4,4@    }
@4,4@}
@4,4@
@3,@console.log('The total is: ' + sum);
@4,@console.log('The highest number is: ' + highest);
@6,@console.log('The lowest number is: ' + lowest);
@@c:0;The variable numbers contains a list of random values between 1 and 100. Our job is to find the highest, the lowest, and the sum of these numbers.@@
@@c:1;Almost every time that you loop over an array, the same form is used--the version shown here, which uses i as a counter variable and moves through the array until we run out of values (by way of its length).@@
@@c:2;We'll also need some starting values for our three results. Sum starts at zero, for obvious reasons. For highest and lowest, we need to have values that will be way out of bounds of the array, so that anything we find will be higher or lower, respectively. We could also use the first value in the array, particularly in a non-numeric list, but the Infinity special value is helpful on numeric arrays like this.@@
@@c:3;Let's start with the easiest of the three, the sum. For each item in the array, we'll add its value (extracted via numbers[i]) to the running total in sum. By the end, we'll have add all of the values together.@@
@@c:4;For the highest, we have to introduce a conditional statement. For each number, if it is higher than the previously-found highest value, we'll store it as the new highest. In this way, we're always keeping track of our maximum value for comparisons, and for output.@@
@@c:5;We could keep the highest (and lowest) logic in separate loops like this, but there's really no point--they do exactly the same things in terms of visiting each array item in turn. We might as well merge them into a single loop.@@
@@c:6;The search for the minimum value is just the opposite of looking for the maximum: at each array index, compare its value with the previously-found minimum, and replace the latter with the former if we locate a lesser value.@@