var gameObjects = [{
    type: "Monster",
    health: 10,
    x: 20,
    y: 30
}, {
    type: "Bonus",
    score: 1000,
    x: 45,
    y: 10
}, {
    type: "Fence",
    height: 20,
    x: 10,
    y: 0
}];
@1,@
@2,@var notFence = [];
@3,@var lowAltitude = [];
@4,@var typeCounter = {};
@2,@
@1,@for (var i = 0; i < gameObjects.length; i++) {
@1,1@    
@2,@    var item = gameObjects[i]; //get each item
@2,@    if (item.type !== "Fence") {
@2,@        notFence.push(item); //add qualifying items to array
@2,@    }
@3,@    if (item.y < 10) {
@3,@        lowAltitude.push(item);
@3,@    }
@5,@    var type = item.type;
@6,@    if (typeof typeCounter[type] == "undefined") {
@6,@        typeCounter[type] = 0;
@6,@    }
@5,@    typeCounter[type]++;
@1,@}
@7,@
@7,@console.log("All non-fence items: ", notFence);
@7,@console.log("All low-altitude items: ", lowAltitude);
@8,@
@8,@for (var type in typeCounter) {
@8,@    var count = typeCounter[type];
@8,@    console.log(count + " items of type " + type);
@8,@}
@@c:0;We'll start by defining our array of game objects. We have only three, and we're going to filter on fairly broad terms, but this would easily scale to much larger data sets.

In this code, we're going to try to assemble three pieces of data: an array containing only non-Fence items, an array of anything positioned close to the floor (y < 20), and a count of each item type.@@
@@c:1;Although we're working with objects, the actual collection that we're looping over is an array. Even with the new kinds of loops we've learned, the old-fashioned array loop never goes out of style.@@
@@c:2;We'll first create a filtered list of items that are not scenery, using the aptly-named notFence variable. As we run through the list, if an item matches our requirements, we'll push it into this list.@@
@@c:3;We can do the same thing for items that are close to the ground, just by checking their y property and pushing them into the lowAltitude array. Some items will end up in both places--that's okay. You can have an item stored in multiple arrays, just as you can have the same value in multiple variables.@@
@@c:4;Our third question, counting the individual object types, is more difficult. For this, we're going to use an object as a named collection. We'll call it typeCounter;@@
@@c:5;Inside our loop, we're going to get the item type, and use that as a key for lookup inside typeCounter.@@
@@c:6;Of course, this code is not going to work very well, since we haven't create anything at typeCounter[type] yet, whatever that may be. We can check to see if we've encountered that type before by testing for undefined. If the property hasn't been defined yet, we'll set it equal to 0 before performing our addition.@@
@@c:7;Finally, we have to log these out. The notFence and lowAltitude arrays are pretty easy to log out via console.log().@@
@@c:8;Our list of item counts by type is a little more complex. We could log it out by just passing it to console.log(), as we did with the arrays, but let's loop over the object and extract a more readable count instead.@@