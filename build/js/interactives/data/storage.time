var storage = {
    get: function(key) {
@,0@        
@1,@        if (typeof window.localStorage == "undefined") {
@1,@            //use cookie
@4,@            var cookies = document.cookie.split(/;\s*/);
@4,@            for (var i = 0; i < cookies.length; i++) {
@4,@            var pair = cookies[i].split("=");
@4,@                if (pair[0] == key) {
@4,@                    return pair[1];
@4,@                }
@4,@            }
@4,@            return null;
@1,@        } else {
@1,@            //use localStorage
@2,@            window.localStorage.getItem(key);
@1,@        }
    },
    set: function(key, value) {
@,0@        
@1,@        if (typeof window.localStorage == "undefined") {
@1,@            //use cookie
@3,@            var expires = new Date();
@3,@            //set expiration for 1 year in the future
@3,@            expires.setFullYear(expires.getFullYear() + 1);
@3,@            expires = expires.toGMTString();
@3,@            document.cookie = key+"="+value+";path=/;expires="+expires;
@1,@        } else {
@1,@            //use localStorage
@2,@            window.localStorage.setItem(key, value);
@1,@        }
    },
    remove: function(key, value) {
@,0@        
@1,@        if (typeof window.localStorage == "undefined") {
@1,@            //use cookie
@5,@            var value = this.get(key);
@5,@            var expires = new Date();
@5,@            expires.setFullYear(1981);
@5,@            expires = expires.toGMTString();
@5,@            document.cookie = key+"=null;path=/;expires="+expires;
@1,@        } else {
@1,@            //use localStorage
@2,@            window.localStorage.removeItem(key);
@1,@        }
    }
};
@@c:0;Our <var>storage</var> object will use localStorage if it exists, but otherwise it will use cookies as a fallback. We'll start by stubbing out the three methods it uses: <var>get</var>, <var>set</var>, and <var>remove</var>@@
@@c:1;In each of our methods, we'll add a feature-detection statement to decide whether to use <var>localStorage</var> or cookies. In browsers that don't support the new storage mode, <var>typeof window.localStorage</var> will return "undefined"--in those browsers, we need to use cookies instead.@@
@@c:2;Our storage methods map cleanly to the local storage API, so we can go ahead and fill those in.@@
@@c:3;Let's start with set, since it's the easiest to test. We'll need to construct a cookie string that expires one year from now, and then assign it to <var>document.cookie</var> to save it. 

We can test that this works by calling <var>storage.set()</var> from the console, then looking at <var>document.cookie</var>, but first we'll have set the condition to "true" temporarily--otherwise our polyfill will use <var>localStorage</var> as intended.@@
@@c:4;Now we can add our <var>get()</var> method. It should look familiar from the code we wrote earlier for getting and setting cookies.@@
@@c:5;Finally, we just add a quick removal method, by assigning the cookie with a null value and a date in the past.@@